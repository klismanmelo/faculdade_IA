# comparacao_algoritmos_otimizacao.py
"""
Este arquivo descreve e compara tr√™s algoritmos de busca e otimiza√ß√£o:
- Subida de Encosta com Rein√≠cio Aleat√≥rio (Hill Climbing with Random Restart)
- T√™mpera Simulada (Simulated Annealing)
- Algoritmo Gen√©tico (Genetic Algorithm)

Cada t√©cnica possui suas pr√≥prias vantagens, desvantagens e aplica√ß√µes ideais.
"""

# 1. Subida de Encosta com Rein√≠cio Aleat√≥rio
"""
Inspirado no conceito de "escalar" at√© encontrar o ponto mais alto (melhor solu√ß√£o).
Se ficar preso em um √≥timo local (n√£o global), reinicia com uma nova solu√ß√£o aleat√≥ria.

Caracter√≠sticas:
- Usa apenas um vizinho por vez
- Reinicia quando n√£o encontra melhorias
- R√°pido e simples de implementar

Vantagens:
- Baixo custo computacional
- F√°cil de implementar
- √ötil para problemas simples

Desvantagens:
- Fica preso facilmente em √≥timos locais
- Pouca explora√ß√£o do espa√ßo de busca
"""

# 2. T√™mpera Simulada (Simulated Annealing)
"""
Inspirado no resfriamento de metais (t√™mpera).
Aceita piores solu√ß√µes com certa probabilidade, que diminui com o tempo.
Isso ajuda a escapar de √≥timos locais e encontrar melhores solu√ß√µes globais.

Caracter√≠sticas:
- Aceita solu√ß√µes piores no in√≠cio (explora√ß√£o)
- Temperatura diminui gradualmente (resfriamento)
- Requer fun√ß√£o de vizinhan√ßa e controle da temperatura

Vantagens:
- Mais flex√≠vel que a subida de encosta
- Evita ficar preso em √≥timos locais
- Boa para problemas complexos com muitos picos locais

Desvantagens:
- Sens√≠vel √† escolha dos par√¢metros (temperatura inicial, taxa de resfriamento)
- Resultados podem variar bastante
- Mais lento que algoritmos simples
"""

# 3. Algoritmo Gen√©tico (Genetic Algorithm)
"""
Inspirado na evolu√ß√£o natural: sele√ß√£o, cruzamento e muta√ß√£o de uma popula√ß√£o de indiv√≠duos.
Cada indiv√≠duo representa uma solu√ß√£o poss√≠vel.

Caracter√≠sticas:
- Trabalha com uma popula√ß√£o (diversidade gen√©tica)
- Usa sele√ß√£o (press√£o seletiva), crossover (recombina√ß√£o) e muta√ß√£o (diversidade)
- Evolui solu√ß√µes ao longo de gera√ß√µes

Vantagens:
- Explora bem o espa√ßo de busca
- Pode escapar de √≥timos locais com facilidade
- Robusto para diferentes tipos de problemas

Desvantagens:
- Requer ajustes finos dos par√¢metros (popula√ß√£o, taxa de muta√ß√£o)
- Uso intensivo de mem√≥ria e tempo
- Mais complexo de implementar
"""

# Compara√ß√£o geral entre os algoritmos
comparacao = {
    "Crit√©rio": [
        "Inspira√ß√£o",
        "Estrat√©gia",
        "Fuga de √≥timos locais",
        "Par√¢metros principais",
        "Velocidade",
        "Consist√™ncia",
        "Facilidade de implementa√ß√£o",
        "Adequado para"
    ],
    "Subida de Encosta": [
        "Escalada at√© o topo local",
        "Melhor vizinho sempre",
        "Rein√≠cio aleat√≥rio",
        "N√∫mero de rein√≠cios",
        "R√°pido",
        "Baixa",
        "F√°cil",
        "Problemas simples"
    ],
    "T√™mpera Simulada": [
        "Resfriamento de metais",
        "Aceita piores solu√ß√µes",
        "Aceita√ß√£o probabil√≠stica",
        "Temperatura e resfriamento",
        "Moderada",
        "M√©dia",
        "M√©dia",
        "Problemas com muitos picos"
    ],
    "Algoritmo Gen√©tico": [
        "Evolu√ß√£o biol√≥gica",
        "Popula√ß√£o evolutiva",
        "Diversidade gen√©tica",
        "Popula√ß√£o, muta√ß√£o, crossover",
        "Pode ser lento",
        "Alta",
        "M√©dia/Alta",
        "Problemas complexos e grandes"
    ]
}

if __name__ == "__main__":
    print("\nüìä Compara√ß√£o entre algoritmos de otimiza√ß√£o:\n")
    for i in range(len(comparacao["Crit√©rio"])):
        print(f"{comparacao['Crit√©rio'][i]}:")
        print(f"  - Subida de Encosta:   {comparacao['Subida de Encosta'][i]}")
        print(f"  - T√™mpera Simulada:    {comparacao['T√™mpera Simulada'][i]}")
        print(f"  - Algoritmo Gen√©tico:  {comparacao['Algoritmo Gen√©tico'][i]}\n")

    print("Dica: escolha o algoritmo com base na complexidade do seu problema e recursos dispon√≠veis!")
